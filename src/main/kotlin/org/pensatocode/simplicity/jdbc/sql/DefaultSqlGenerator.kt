/*
 * Copyright 2017-2020 Alex Magalhaes <alex@pensatocode.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.pensatocode.simplicity.jdbc.sql

import org.pensatocode.simplicity.extra.convertToSnakeCase
import org.pensatocode.simplicity.jdbc.TableDescription
import org.pensatocode.simplicity.extra.printAsString
import org.pensatocode.simplicity.extra.repeat
import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Sort
import org.springframework.data.domain.Sort.Direction

import java.sql.DatabaseMetaData
import java.sql.SQLException

import java.util.*

/**
 * SQL Generator compatible with SQL:99.
 */
open class DefaultSqlGenerator : SqlGenerator {

    @Throws(SQLException::class)
    override fun isCompatible(metadata: DatabaseMetaData): Boolean {
        return true
    }

    override fun count(table: TableDescription): String {
        return "SELECT count(*) FROM ${table.tableName}"
    }

    override fun deleteAll(table: TableDescription): String {
        return "DELETE FROM ${table.tableName}"
    }

    override fun deleteByPK(table: TableDescription): String {
        return "DELETE FROM ${table.tableName} WHERE ${joinWithSuffix(EQ_PARAM, AND, *table.pkColumns)}"
    }

    override fun existsByPK(table: TableDescription): String {
        return "SELECT 1 FROM ${table.tableName} WHERE ${joinWithSuffix(EQ_PARAM, AND, *table.pkColumns)}"
    }

    override fun insert(table: TableDescription, autoGeneratedKey: Boolean): String {
        val sb = StringBuilder()
        if (autoGeneratedKey) {
            sb.append("INSERT INTO ${table.tableName} (${table.columns.printAsString()}) ")
            sb.append("VALUES (${repeat(PARAM, COMMA, table.columns.size)})")
        } else {
            sb.append("INSERT INTO ${table.tableName} (${table.pkColumns.printAsString()},${table.columns.printAsString()}) ")
            sb.append("VALUES (${repeat(PARAM, COMMA, table.pkColumns.size + table.columns.size)})")
        }
        return sb.toString()
    }

    override fun selectAll(table: TableDescription): String {
        return "SELECT ${table.selectClause} FROM ${table.fromClause}"
    }

    override fun selectAll(table: TableDescription, whereClause: String): String {
        return "${selectAll(table)} WHERE $whereClause"
    }

    override fun selectAll(table: TableDescription, page: Pageable): String {
        return selectAll(table, BLANK, page)
    }

    override fun selectAll(table: TableDescription, whereClause: String, page: Pageable): String {
        val sort = if (page.sort.isSorted) { page.sort } else { sortByPKs(table.pkColumns) }

        val sb = StringBuilder()
        sb.append("SELECT t2__.* FROM ( ")
        sb.append("SELECT row_number() OVER ( ${orderByClause(sort)} ) AS rn__, t1__.* ")
        sb.append("FROM ( ${selectAll(table)} ) t1__ ")
        if (BLANK != whereClause) {
            sb.append("WHERE $whereClause ")
        }
        sb.append(") t2__ WHERE t2__.rn__ BETWEEN ${page.offset + 1} AND ${page.offset + page.pageSize}")

        return sb.toString()
    }

    override fun selectAll(table: TableDescription, sort: Sort): String {
        return "${selectAll(table)} ${orderByClause(sort)}"
    }

    override fun selectAll(table: TableDescription, whereClause: String, sort: Sort): String {
        return "${selectAll(table,whereClause)} ${orderByClause(sort)}"
    }

    override fun selectByPK(table: TableDescription): String {
        return "${selectAll(table)} WHERE ${joinWithSuffix(EQ_PARAM, AND, *table.pkColumns)}"
    }

    protected fun sortByPKs(pks: Array<String>): Sort {
        return Sort.by(Direction.ASC, *pks)
    }

    protected fun orderByClause(sort: Sort): String {
        val sj = StringJoiner(COMMA, " ORDER BY ", BLANK)
        for(s in sort)
            sj.add("${convertToSnakeCase(s.property)} ${s.direction}")
        return sj.toString()
    }

    override fun update(table: TableDescription): String {
        val sb = StringBuilder()
        sb.append("UPDATE ${table.tableName} ")
        sb.append("SET ${joinWithSuffix(EQ_PARAM, COMMA, *table.columns)} ")
        sb.append("WHERE ${joinWithSuffix(EQ_PARAM, AND, *table.pkColumns)}")
        return sb.toString()
    }

    private fun joinWithSuffix(suffix: String, delimiter: String, vararg elements: String): String {
        val sj = StringJoiner("$suffix $delimiter", BLANK, suffix)
        for(e in elements)
            sj.add(e)
        return sj.toString()
    }

    companion object {
        internal val BLANK = ""
        internal val AND = " AND "
        internal val OR = " OR "
        internal val COMMA = ", "
        internal val PARAM = "?"
        internal val EQ_PARAM = " = ? "

    }
}
